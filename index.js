import TelegramBot from "node-telegram-bot-api";
import fs from "fs";
import { fileURLToPath } from "url";
import { dirname } from "path";
import path from "path";

// –í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
const token = "6479083693:AAFU9j9HeR4qK6QFURQmtSIxj41SZfFnwns";
const bot = new TelegramBot(token, { polling: true });

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const userFilePath = path.join(__dirname, 'users.json');

async function sendVideoToUser(chatId, videoName, callback = "", buttonTitle) {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ-—Ñ–∞–π–ª—É –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
    const videoPath = path.join(__dirname, "videos", videoName);
    const videoData = await fs.promises.readFile(videoPath);
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
    await bot.sendVideo(chatId, videoData, {
      filename: videoName,
      reply_markup: {
        inline_keyboard: [[{ text: buttonTitle, callback_data: callback }]],
      },
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ:", error);
  }
}

async function sendToChannel(messageText) {
    const channelName = '@autoaicheck';  // –ò–º—è –∫–∞–Ω–∞–ª–∞, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–µ
    const messageOptions = {
        parse_mode: 'HTML'  // –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    };

    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        const channelInfo = await bot.getChat(channelName);
        const channelId = channelInfo.id;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
        await bot.sendMessage(channelId, messageText, messageOptions);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
function readUsernamesFromFile() {
    try {
        const data = fs.readFileSync(userFilePath);
        return JSON.parse(data);
    } catch (error) {
        // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏, –≤–µ—Ä–Ω–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ users.json:', error);
        return [];
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ username –≤ —Ñ–∞–π–ª
function writeUsernameToFile(username, status) {
    const users = readUsernamesFromFile();

    // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
    const existingUserIndex = users.findIndex(user => user.username === username);

    if (existingUserIndex !== -1) {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–∏–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å
        users[existingUserIndex].status = status;
    } else {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –¥–æ–±–∞–≤–∏–º –µ–≥–æ
        users.push({ username, status });
    }

    try {
        fs.writeFileSync(userFilePath, JSON.stringify(users, null, 2));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª users.json:', error);
    }
}

function writeUserToFile(users) {
    try {
        fs.writeFileSync(userFilePath, JSON.stringify(users, null, 2));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª user.json:', error);
    }
}

function changeUserStatus(username, newStatus) {
    const users = readUsernamesFromFile();

    const updatedUsers = users.map(existingUser => {
        if (existingUser.username == username) {
            existingUser.status = newStatus;
        }
        return existingUser;
    });

    writeUserToFile(updatedUsers);
}


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id,
    userFirstName = msg.chat.first_name;

    writeUsernameToFile(msg.chat.username, 'started');

  bot.sendMessage(
    chatId,
    `–ü—Ä–∏–≤–µ—Ç, ${userFirstName}!

–ù–∞—á–Ω–µ–º –Ω–∞—à –¥–∏–∞–ª–æ–≥ —Å–æ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞
–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.`
  );
  sendVideoToUser(chatId, "one.mp4", "second", "–°–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ");
  sendToChannel(`‚úÖ –ó–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞:
–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${msg.chat.first_name} ${msg.chat.last_name};
–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @${msg.chat.username}`);
});

bot.on("callback_query", async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const videoName = callbackQuery.data;

  try {
    if (videoName == "second") {
      bot.sendMessage(
        chatId,
        `–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, –¥–∞–≤–∞–π –¥–∞–ª—å—à–µ!

–í —ç—Ç–æ–º –≤–∏–¥–µ–æ –≤—ã —É–∑–Ω–∞–µ—Ç–µ, –∫–∞–∫ –º—ã –∑–∞–º–µ–Ω–∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –Ω–∞—à–µ–≥–æ –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º`
      );

      bot.editMessageReplyMarkup(
        {
          inline_keyboard: [],
        },
        {
          chat_id: chatId,
          message_id: messageId,
        }
      );
      await sendVideoToUser(chatId, "second.mp4", "third", "–°–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ");
      await changeUserStatus(callbackQuery.message.chat.username, "second_video")
    } else if (videoName == "third") {
      bot.sendMessage(
        chatId,
        `–ê –≤–æ—Ç –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!

–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –≤–∏–¥–µ–æ - –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é AISender –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö –Ω–∞—à–∏—Ö –∑–∞–∫–∞–∑—á–∏–∫–æ–≤`
      );

      bot.editMessageReplyMarkup(
        {
          inline_keyboard: [],
        },
        {
          chat_id: chatId,
          message_id: messageId,
        }
      );

      await sendVideoToUser(
        chatId,
        "third.mp4",
        "final",
        "üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä"
      );
      await changeUserStatus(callbackQuery.message.chat.username, "third_video")
    } else if (videoName == "final") {
      bot.sendMessage(
        chatId,
        `–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –Ω–∞–º–∏!

–Ø –ø–µ—Ä–µ–¥–∞–ª –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç —Å—Ç–∞—Ä—à–µ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏, —Å–∫–æ—Ä–æ –æ–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∫–µ–π—Å–∞ –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é AISender –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.
            
–ö—Ä–æ–º–µ —Ç–æ–≥–æ, –≤–∞—Å –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–∏—è—Ç–Ω—ã–π –±–æ–Ω—É—Å. üéÅ –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ "–†–∞–∑–±–æ—Ä" —Å—Ç–∞—Ä—à–µ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É @nazar_mlc. üòâ`
      );

      bot.editMessageReplyMarkup(
        {
          inline_keyboard: [],
        },
        {
          chat_id: chatId,
          message_id: messageId,
        }
      );

      sendToChannel(`üéÅ –î–æ—Å—Ç–∏–≥ —Ü–µ–ª–µ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è:
–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${callbackQuery.message.chat.first_name} ${callbackQuery.message.chat.last_name};
–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @${callbackQuery.message.chat.username}`);
await changeUserStatus(callbackQuery.message.chat.username, "finished")
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("text", (msg) => {
  if (msg.text != "/start") {
    const chatId = msg.chat.id;
    bot.sendMessage(
      chatId,
      `–ü—Ä–æ—â—É –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–æ —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å "${msg.text}". –°–º–æ—Ç—Ä–∏—Ç–µ –≤–∏–¥–µ–æ, –Ω–∞—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏!`
    );
  }
});
